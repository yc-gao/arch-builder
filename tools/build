#!/usr/bin/env bash
set -e

opt_pkg="packages.x86_64"

work_dir="work_dir"
tmp_dir="${work_dir}/tmp"

fs_uuid=
fs_label="archiso_$(date --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +%Y%m)"

rootfs_dir="${work_dir}/rootfs"
espfs_dir="${work_dir}/esp"
isofs_dir="${work_dir}/iso"

make_rootfs() {
    rm -rf "${rootfs_dir}"
    mkdir -p "${rootfs_dir}"

    cp -af --no-preserve=ownership,mode -T -- airootfs "${rootfs_dir}"

    local -a package_lst
    mapfile -t pkg_lst < <(sed '/^[[:blank:]]*#.*/d;s/#.*//;/^[[:blank:]]*$/d' "${opt_pkg}")

    pacstrap -c -G -M "${rootfs_dir}" "${pkg_lst[@]}"

    if [[ -e "${rootfs_dir}/root/customize_airootfs.sh" ]]; then
        echo "Running customize_airootfs.sh in '${rootfs_dir}' chroot..."
        chmod -f -- +x "${rootfs_dir}/root/customize_airootfs.sh"
        # Unset TMPDIR to work around https://bugs.archlinux.org/task/70580
        eval -- env -u TMPDIR arch-chroot "${rootfs_dir}" "/root/customize_airootfs.sh"
        rm -- "${rootfs_dir}/root/customize_airootfs.sh"
        echo "Done! customize_airootfs.sh run successfully."
    fi
}

make_esp() {
    rm -rf "${espfs_dir}"

    mkdir -p "${tmp_dir}"
    fs_uuid="$(uuidgen)"
    sed "s|%ARCHISO_UUID%|${fs_uuid}|g;
         s|%ARCHISO_LABEL%|${fs_label}|g" grub/grub.cfg >"${tmp_dir}/grub.cfg"

    mkdir -p "${espfs_dir}/EFI/BOOT"
        local grubmodules=(all_video at_keyboard boot btrfs cat chain configfile echo efifwsetup efinet exfat ext2 f2fs fat font \
                 gfxmenu gfxterm gzio halt hfsplus iso9660 jpeg keylayouts linux loadenv loopback lsefi lsefimmap \
                 minicmd normal ntfs ntfscomp part_apple part_gpt part_msdos png read reboot regexp search \
                 search_fs_file search_fs_uuid search_label serial sleep tpm udf usb usbserial_common usbserial_ftdi \
                 usbserial_pl2303 usbserial_usbdebug video xfs zstd)
    grub-mkstandalone -O x86_64-efi \
        --modules="${grubmodules[*]}" \
        --locales="en@quot" --themes="" \
        -o "${espfs_dir}/EFI/BOOT/BOOTx64.EFI" \
        "boot/grub/grub.cfg=${tmp_dir}/grub.cfg"
}

# https://wiki.syslinux.org/wiki/index.php?title=Isohybrid
make_iso() {
    rm -rf "${isofs_dir}"

    # syslinux beg
    mkdir -p "${isofs_dir}/boot/syslinux/"
    install -m 0644 -- "${rootfs_dir}/usr/lib/syslinux/bios/"* "${isofs_dir}/boot/syslinux/"
    : >"${isofs_dir}/boot/${fs_uuid}.uuid"
    # syslinux end

    # grub beg
    mkdir -p "${tmp_dir}"
    local efibootimg="${tmp_dir}/efiboot.img"
    rm -rf "${efibootimg}"
    mkfs.fat -C -F 32 "${efibootimg}" "$((256*1024))"
    mmd -i "${efibootimg}" ::/EFI ::/EFI/BOOT
    mcopy -i "${efibootimg}" "${espfs_dir}/EFI/BOOT/BOOTx64.EFI" ::/EFI/BOOT/BOOTx64.EFI
    # grub end

    # ramfs beg
    mkdir -p "${isofs_dir}/linux"
    install -m 0644 -- "${rootfs_dir}/boot/initramfs-"*".img" "${isofs_dir}/linux"
    install -m 0644 -- "${rootfs_dir}/boot/vmlinuz-"* "${isofs_dir}/linux"
    # ramfs end

    # airootfs beg
    mkdir -p "${isofs_dir}/linux"
    local image_path="${isofs_dir}/linux/airootfs.erofs"
    mkfs.erofs \
        "${image_path}" "${rootfs_dir}"
    # airootfs end

    xorriso \
        -no_rc -as mkisofs \
        -iso-level 3 -full-iso9660-filenames \
        -joliet -joliet-long -rational-rock \
        -volid "${fs_label}" \
        -isohybrid-mbr "${isofs_dir}/boot/syslinux//isohdpfx.bin" \
        --mbr-force-bootable -partition_offset 16 \
        -eltorito-boot boot/syslinux/isolinux.bin \
        -eltorito-catalog boot/syslinux/boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -append_partition 2 C12A7328-F81F-11D2-BA4B-00A0C93EC93B "${efibootimg}" \
        -eltorito-alt-boot \
        -e --interval:appended_partition_2:all:: \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
        -o "${work_dir}/linux.iso" \
        "${isofs_dir}"
}

main() {
    while (($#)); do
        case "$1" in
            -w)
                opt_work="$2"
                shift 2
                ;;
            -o)
                opt_output="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    make_rootfs
    make_esp
    make_iso
}

main "$@"

