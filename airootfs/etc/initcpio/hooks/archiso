#!/usr/bin/ash
#
# SPDX-License-Identifier: GPL-3.0-or-later

_resolve_dev() {
    local device="${1}"
    local delay="${2:-5}"

    case "${device}" in
        'UUID='* | 'LABEL='* | 'PARTUUID='* | 'PARTLABEL='*)
            device="$(blkid -lt "${device}" -o device)"
            ;;
    esac
    if poll_device "${device}" "${delay}"; then
        # printf "${device}"
        return 0
    fi
    return 1
}

# args: source, upperdir, workdir, newroot
_mnt_overlayfs() {
    local src="${1}"
    local upperdir="${2}"
    local workdir="${3}"
    local newroot="${4}"
    mount -t overlay -o \
        "lowerdir=${src},upperdir=${upperdir},workdir=${workdir}" \
        airootfs "${newroot}"
}

# args: device, mountpoint, flags, opts
_mnt_dev() {
    local dev="${1}"
    local mnt="${2}"
    local flg="${3}"
    local opts="${4}"

    msg ":: Mounting '${dev}' to '${mnt}'"

    if ! _resolve_dev "${dev}" "${rootdelay:-30}"; then
        echo "ERROR: '${dev}' device did not show up after ${rootdelay:-30} seconds..."
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi

    if ! mount --mkdir -o "${opts}" ${flg} "${dev}" "${mnt}"; then
        echo "ERROR; Failed to mount '${dev}'"
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi

    msg ":: Device '${dev}' mounted successfully."
}

# variables
#   - archiso_device
#   - copytoram
#   - cow_device
#   - cow_spacesize
run_hook() {
    [ -z "${copytoram}" ] && copytoram="y"
    [ -z "${cow_spacesize}" ] && cow_spacesize="256M"

    # set mount handler for archiso
    export mount_handler="archiso_mount_handler"
}

# This function is called normally from init script, but it can be called
# as chain from other mount handlers.
# args: /path/to/newroot
archiso_mount_handler() {
    local newroot="${1}"

    # mount iso
    if mountpoint -q "/run/archiso/bootmnt"; then
        echo "ERROR: can't mount root on /run/archiso/bootmnt"
        launch_interactive_shell
    fi
    _mnt_dev "${archiso_device}" "/run/archiso/bootmnt" "-r" "defaults"

    local fs_img="/run/archiso/bootmnt/linux/airootfs.erofs"
    if [ ! -f "${fs_img}" ]; then
        echo "ERROR: no root file system image found"
        launch_interactive_shell
    fi

    if [ "${copytoram}" = "y" ]; then
        local fs_img_size="$(du -bs "${fs_img}" | cut -f 1)"
        local copytoram_size="$((fs_img_size + 2 * 1024 * 1024))"
        msg ":: Mounting /run/archiso/copytoram (tmpfs) filesystem, size=${copytoram_size}"
        mount --mkdir -t tmpfs -o "size=${copytoram_size},mode=0755" copytoram /run/archiso/copytoram
        local img_fullname="${fs_img##*/}"
        if command -v pv >/dev/null 2>&1; then
            pv "${fs_img}" >"/run/archiso/copytoram/${img_fullname}"
        else
            cp "${fs_img}" "/run/archiso/copytoram/${img_fullname}"
        fi
        umount -d "/run/archiso/bootmnt"
        fs_img="/run/archiso/copytoram/${img_fullname}"
    fi

    local img_loopdev="$(losetup --find --show --read-only -- "${fs_img}")"
    _mnt_dev "${img_loopdev}" "/run/archiso/airootfs" "-r" "defaults"

    # mount cow
    if _resolve_dev "${cow_device}" "3"; then
        _mnt_dev "${cow_device}" "/run/archiso/cowspace" "" "defaults"
    else
        msg ":: Mounting /run/archiso/cowspace (tmpfs) filesystem, size=${cow_spacesize}..."
        mount --mkdir -t tmpfs -o "size=${cow_spacesize},mode=0755" cowspace /run/archiso/cowspace
    fi

    mkdir -p "/run/archiso/cowspace/upperdir" "/run/archiso/cowspace/workdir"
    _mnt_overlayfs \
        "/run/archiso/airootfs" \
        "/run/archiso/cowspace/upperdir" \
        "/run/archiso/cowspace/workdir" \
        "${newroot}"
}

